/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
    //getData();
}

function getData()
{
    if(window.widget)
    {
        var username = widget.preferenceForKey("username");
 
        if (username && username.length > 0)
        {
            
            var feedURL = "http://"+username+".habrahabr.ru/";
            var onloadHandler = function() { xmlLoaded(xmlRequest); };

            // XMLHttpRequest setup code
            var xmlRequest = new XMLHttpRequest();
            xmlRequest.onload = onloadHandler;
            xmlRequest.open("GET", feedURL);
            xmlRequest.setRequestHeader("Cache-Control", "no-cache");
            xmlRequest.send(null);
        }
    }
}
// Called when an XMLHttpRequest loads a feed; works with the XMLHttpRequest setup snippet
function xmlLoaded(xmlRequest) 
{
	if (xmlRequest.status == 200) 
    {
        var pUsername = widget.preferenceForKey("username");
        var lblKarma = document.getElementById("lblKarma");
        var lblRating = document.getElementById("lblRating");
        var lblPlace = document.getElementById("lblPlace");
        var lblVotes = document.getElementById("lblVotes");
        var lblUsername = document.getElementById("lblUsername");
        
        var searchPattern=new RegExp('<div class="profile-karma-holder">.+?<span class=\"mark\"><span>(.+?) </span>.+?<dd class="total"><em>(.+?)</em></dd>.+?<dd class="number">(.+?)</dd>.+?<dd class="rating-place">(.+?)-', "gim");
        var result = searchPattern.exec(removeNL(xmlRequest.responseText));
        
        if (result)
        {
            lblKarma.innerText = result[1]; // карма
            lblVotes.innerText = result[2]; // количество голосов
            lblRating.innerText = result[3]; // рейтинг
            lblPlace.innerText = result[4] + "-е место"; //место в общем рейтинге
        }
	}
}

function removeNL(s) 
{
  r = "";
  for (i=0; i < s.length; i++) {
    if (s.charAt(i) != '\n' &&
        s.charAt(i) != '\r' &&
        s.charAt(i) != '\t') {
      r += s.charAt(i);
      }
    }
  return r;
}
  
//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

function resize()
{
    // Values you provide
    var itemToResize = document.getElementById("karma");	// replace with ID of element to resize
    var newDimensions = {width: 344, height: 282};				// new CSS width and height values

    // Resizing code
    var oldWidth = parseInt(document.defaultView.getComputedStyle(itemToResize, null).getPropertyValue("width"));
    var oldHeight = parseInt(document.defaultView.getComputedStyle(itemToResize, null).getPropertyValue("height"));
    var startingRect = new AppleRect (0, 0, oldWidth, oldHeight);
    var finishingRect = new AppleRect (0, 0, newDimensions.width, newDimensions.height);
    var resizeHandler = function(rectAnimation, currentRect, startingRect, finishingRect) 
    {
        itemToResize.style.width = currentRect.right + "px";
        itemToResize.style.height = currentRect.bottom + "px";
    };
    var currentRectAnimation = new AppleRectAnimation( startingRect, finishingRect, resizeHandler );
    var currentAnimator = new AppleAnimator (500, 83);
    currentAnimator.addAnimation(currentRectAnimation);
    currentAnimator.start();
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    getData();
    resize();
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) 
    {
        widget.resizeAndMoveTo(window.screenX, window.screenY, 305, 120);
        widget.prepareForTransition("ToBack");
        var username = widget.preferenceForKey("username");
 
        if (username && username.length > 0)
        {
            txtUserName.value = username;
        }
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) 
    {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) 
    {
        widget.resizeAndMoveTo(window.screenX, window.screenY, 195, 68);
        widget.prepareForTransition("ToFront");
        
        widget.setPreferenceForKey(txtUserName.value ,"username");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) 
    {
        setTimeout('widget.performTransition();', 0);
    }
    
    getData();
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}
